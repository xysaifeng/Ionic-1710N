WEBAPP

Ionic Day03

1. 在客户端获取用户填写的注册表单值

2. 修改 sign-up.ts 文件，声明属性 user (JS 对象)
    user = {
        email:'',
        password: ''
    };

3. 修改 sign-up.html 文件，做表单数据的双向绑定 two way binding
    [(ngModel)] = 'user.email'

4. 修改 sign-up.html 文件，为提交按钮绑定 tap 事件

5. 修改 sign-up.ts 文件，定义函数 signUp()，验证表单值

6. 从 Ionic 客户端发送注册用户的 HTTP 请求

7. 修改 app.module.ts 文件
    7.1 加载 HttpClientModule 模块
        import {HttpClientModule} from '@angular/common/http';
    7.2 把 HttpClientModule 加入数组 imports

8. 修改 sign-up.ts 文件
    8.1 加载 HttpClient
        import {HttpClient} from '@angular/common/http';
    8.2 依赖注入 HttpClient
        constructor(..., private httpClient: HttpClient){}
    8.3 使用 this.httpClient 向服务器端发送各种请求
        this.httpClient.get('/signUp')
            .subscribe(
                res => {
                    console.log(res);
                },
                err => {}
            );

9. 修改 app.js 文件
    app.get('/signUp', (req, res) => {
        // ...
        res.send({"status": "ok"});
    });

10. Ionic 跨域问题
    修改 app-demo/ionic.config.json 文件
    添加代理 proxy
    ,
    "proxies": [
        {
            "path": "/signUp",
            "proxyUrl": "http://127.0.0.1:3000/signUp"
        }
    ]
    重启 Ionic 客户端

11. 以 get 方式传递参数到服务器端
    在 sign-up.ts 中，引入 HttpParams
    import {HttpParams} from '@angular/common/http';

    let params = new HttpParams().set('key',value);

    this.httpClient.get(url, {params})
        .subscribe(
            // ...
        );

12. 在 app.js 中，接收表单数据
    app.get('/signUp', (req, res) => {
        let email = req.query.email;
        let password = req.query.password;
        console.log(`email: ${email}; password: ${password}`);

        res.send({"status": "ok"});
    });

13. 以 post 方式发送注册请求
    this.httpClient.post(url, {email: this.user.email, password: this.user.password})
        .subscribe(
            // ...
        );

14. 在服务器中获取 post 请求参数时，需要配置 body-parser 中间件
    app.js
    a. 引入 body-parser
       const bodyParser = require('body-parser');
    b. 配置中间件
       app.use(bodyParser.json());
    c. let value = req.body.key;

15. 实现服务器端热部署
    cmd：npm i -g supervisor
    关闭以前的服务
    再次启动服务：
    app-server/ 下，cmd：supervisor app

16. 在 app.js 中处理用户注册请求
    16.1 const mysql = require('mysql');
    16.2 let pool = mysql.createPool({user: 'root'});
    16.3 let sql = 'INSERT INTO db.user VALUE(NULL, ?, ?)';
    16.4 pool.query(sql, [email, password], (err, results) => {
            if(err) throw err;
            if(results.affectedRows === 1) {
                res.send({"status": "ok"});
            } else{
                res.send({"status": "err"});
            }
         });

17. 在 sign-up.ts 中，对响应结果进行解析

18. 把 HomePage 改为 lazy loading
    18.1 创建 home/home.module.ts
        import { NgModule } from '@angular/core';
        import { IonicPageModule } from 'ionic-angular';
        import { HomePage } from './home';

        @NgModule({
          declarations: [
            HomePage,
          ],
          imports: [
            IonicPageModule.forChild(HomePage),
          ],
        })
        export class HomePageModule {}
    18.2 修改 home.ts
         import {IonicPage, NavController } from 'ionic-angular';
         @IonicPage()
    18.3 修改 app.module.ts
         删除 HomePage 的引入
         以及两个数组的 HomePage 元素
    18.4 修改 app.component.ts
         删除 HomePage 的引入
         rootPage:any = 'HomePage';


